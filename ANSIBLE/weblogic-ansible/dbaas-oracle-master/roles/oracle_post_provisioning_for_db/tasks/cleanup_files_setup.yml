- name: create cleanup_files.ctl for standalone
  template:
    src: standalone_cleanup_files.ctl.j2
    dest: "{{ oracle_base }}/admin/ctl/cleanup_files.ctl"
  when: 
    - '(ansible_play_hosts | length) == 1'
    - .cleanup_file_grid_done.stat.exists == false

- name: create cleanup_files.ctl for cluster
  template:
    src: rac_cleanup_files.ctl.j2
    dest: "{{ oracle_base }}/admin/ctl/cleanup_files.ctl"
  when: 
    - '(ansible_play_hosts | length) > 1'
    - .cleanup_file_grid_done.stat.exists == false

- name: Insert a line at the end of a file.
  lineinfile:
        path: "{{ oracle_base }}/admin/ctl/cleanup_files.ctl"
        line: "/u01/app/oracle/diag/rdbms/{{ oracle_db_name }}/{{ oracle_sid }}/trace:alert_{{ oracle_sid }}.log:archive:clear:7:100
               /u01/app/oracle/admin/{{ oracle_db_name }}/adump:*aud:delete:none:1:0"
  when: post_provisoning_done.stat.exists == false

- name: place a marker for cleanup_file_grid_done
  file:
    path: "{{ oracle_base }}/admin/ctl/.cleanup_file_grid_done"
    state: touch
  when: .cleanup_file_grid_done.stat.exists == false

- name: Run Cleanup file job for Database
  command: '{{ oracle_base }}/admin/scripts/cleanup_files.ksh'
  register: cleanup_files
  ignore_errors: true
    
- name: save cleanup_files script stdout
  copy:
    dest: '{{ oracle_base }}/admin/logs/cleanup_files_{{ ansible_date_time.iso8601 }}.out'  
    content: '{{ cleanup_files.stdout }}'

- name: save cleanup_files script stderr
  copy:
    dest: "{{ oracle_base }}/admin/logs/cleanup_files_{{ ansible_date_time.iso8601 }}.err"
    content: "{{ cleanup_files.stderr | default('') }}"
  when: cleanup_files.stderr_lines | length > 0

- name: create a crontab
  cron:
    name: "run cleanup_files.ksh"
    minute: "45"
    hour: "1"
    day: "*"
    month: "*"
    job: "{{ oracle_base }}/admin/scripts/cleanup_files.ksh > {{ oracle_base }}/logs/cleanup_files.ksh.log 2>&1"
  when: cleanup_files.rc == 0
