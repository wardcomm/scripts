---

- include_role:
    name: oracle_api_services
    tasks_from: "{{ checklist_task }}_checklist_update.yml"
  vars:
    chklst_json_body:
      new_entry: True
      checklist_type: '9'
      category_type: Install
      gi_install_status: IN PROGRESS
  tags:
  - apex_api

- block:
  - name: install grid
    environment: "{{ ora_user_env }}"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      nohup {{ oracle_tmp }}/grid/runInstaller -silent -force -ignorePrereq -ignoreSysPreReqs -responseFile {{ oracle_tmp }}/grid_install.rsp 2>&1 | tee {{ oracle_tmp }}/grid_stdout.out &
      sleep 30
      while true
      do 
        c=$(ps -ef | grep -v grep | grep grid_install.rsp | grep java | wc -l)
        [ $c -eq 0 ] && break
        sleep 10
      done
    args:
      executable: /bin/bash
      creates: "{{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands"
    register: grid_install
    failed_when: '"[FATAL]" in grid_install.stdout or "Installation cannot continue" in grid_install.stdout or  grid_install.rc != 0'
    when: inventory_hostname == master_node

  - name: get install logfile
    find:
      paths: "{{ oracle_base }}/oraInventory/logs"
      file_type: file
      age: -10m
      age_stamp: mtime
      patterns: silentInstall\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}[AP]M.log
      use_regex: yes
    register: gi_install_log

  - import_role:
      name: oracle_api_services
      tasks_from: upload_log.yml
    vars:
      logfile_path: "{{ gi_install_log.files[0].path }}"
    tags:
    - apex_api

  - name: execute orainstRoot.sh script
    block:
    - name: general oracle post-installation
      command: "{{ oracle_base }}/oraInventory/orainstRoot.sh"
      register: orainstroot_script

    always:
    - name: save orainstroot script stdout
      copy:
        dest: "{{ oracle_tmp }}/orainstroot_script_stdout.out"
        content: "{{ orainstroot_script.stdout }}"

    - name: save orainstroot script  stderr
      copy:
        dest: "{{ oracle_tmp }}/orainstroot_script_stderr.err"
        content: "{{ orainstroot_script.stderr }}" 
    when: 
    - 'oracle_base + "/oraInventory/orainstRoot.sh" in hostvars[master_node]["grid_install"]["stdout"]'

  - include_tasks: execute_root_script.yml
    loop: "{{ cluster_nodes }}"
    loop_control:
      loop_var: curr_host
    tags: root_script    
    when: 
    - 'oracle_grid_home + "/root.sh" in hostvars[master_node]["grid_install"]["stdout"]'
    - inventory_hostname == curr_host

  - include_tasks: execute_rootupgrade_script.yml
    loop: "{{ cluster_nodes }}"
    loop_control:
      loop_var: curr_host
    tags: upgrade_script    
    when: 
    - 'oracle_grid_home + "/rootupgrade.sh" in hostvars[master_node]["grid_install"]["stdout"]'
    - inventory_hostname == curr_host

  - name: run grid configTool
    environment: "{{ ora_user_env }}"
    become: yes
    become_user: "{{ oracle_user }}"
    shell: |
      nohup {{ oracle_grid_home }}/cfgtoollogs/configToolAllCommands RESPONSE_FILE={{ oracle_tmp }}/grid_configTool.rsp 2>&1 | tee {{ oracle_tmp }}/config_stdout.out &
      sleep 30
      while true
      do 
        c=$(ps -ef | grep -v grep | grep grid_configTool.rsp | grep java | wc -l)
        [ $c -eq 0 ] && break
        sleep 10
      done
    args:
      executable: /bin/bash
    register: configTool
    tags: configTool
    failed_when: '"The action configuration has failed its perform method" in configTool.stdout'
    when: 
    - inventory_hostname == master_node
    - 'oracle_grid_home + "/cfgtoollogs/configToolAllCommands RESPONSE_FILE=<response_file>" in hostvars[master_node]["grid_install"]["stdout"]'
  
  rescue:
  - include_role:
      name: oracle_api_services
      tasks_from: "{{ checklist_task }}_checklist_update.yml"
    vars:
      chklst_json_body:
        new_entry: False
        gi_install_status: "FAILED"
    tags:
    - apex_api
  
  - name: Install Failed
    fail:
      msg: GI Install Failed

- include_role:
    name: oracle_api_services
    tasks_from: "{{ checklist_task }}_checklist_update.yml"
  vars:
    chklst_json_body:
      new_entry: False
      gi_install_status: "SUCCESSFUL"
  tags:
  - apex_api