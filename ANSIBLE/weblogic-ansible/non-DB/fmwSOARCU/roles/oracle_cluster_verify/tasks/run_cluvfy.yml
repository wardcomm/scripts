---

- include_role:
    name: oracle_api_services
    tasks_from: "{{ checklist_task }}_checklist_update.yml"
  vars:
    chklst_json_body:
      new_entry: True
      checklist_type: "5"
      category_type: Install
      gi_install_status: "PENDING"
  tags:
  - apex_api

- name: create the cluster verify directory to the oracle user
  file:
    group: "{{ oracle_group }}"
    owner: "{{ oracle_user }}"
    path: "{{ oracle_tmp }}/cluster_verify"
    state: directory
    recurse: yes

- name: unzip cluvfy
  unarchive: 
    src: "{{ oracle_installer_path }}/cvupack_Linux_x86_64.zip" 
    dest: "{{ oracle_tmp }}/cluster_verify" 
    remote_src: yes 
    keep_newer: true
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0755
    validate_certs: no

- name: set cvu_config settings
  lineinfile: 
    path: "{{ oracle_tmp }}/cluster_verify/cv/admin/cvu_config"
    regexp: "^{{ item.regex }}"
    line: "{{ item.regex }}={{ item.value }}"
  with_items:
    - { regex: CV_RAW_CHECK_ENABLED, value: 'FALSE' }

- name: run cluvfy
  become: yes
  become_user: "{{ oracle_user }}"
  environment: "{{ ora_user_env }}"
  command: "{{ oracle_tmp }}/cluster_verify/bin/cluvfy stage -pre crsinst -osdba {{ oracle_dba_group }} -orainv {{ oracle_group }} -n {{ cluster_nodes | join(',') }} -r {{ oracle_major_version }} -verbose"
  ignore_errors: yes
  register: cluvfy_results

- name: save cluvfy stdout
  copy:
    dest: "{{ oracle_tmp }}/cluvfy_stdout.out"
    content: "{{ cluvfy_results.stdout }}"
  changed_when: False

- name: save cluvfy stderr
  copy:
    dest: "{{ oracle_tmp }}/cluvfy_stderr.err"
    content: "{{ cluvfy_results.stderr }}"
  changed_when: False
  when: cluvfy_results.stderr_lines | length > 0

- import_role:
    name: oracle_api_services
    tasks_from: upload_log.yml
  vars:
    logfile_path: "{{ oracle_tmp }}/cluvfy_stdout.out"
  tags:
  - apex_api

- name: Check Cluster Verify Result
  set_fact:
    final_result: "{% if cluvfy_results.rc | default(1) != 0 -%}FAILED
                   {%- else -%}SUCCESSFUL
                   {%- endif %}"

- include_role:
    name: oracle_api_services
    tasks_from: "{{ checklist_task }}_checklist_update.yml"
  vars:
    chklst_json_body:
      new_entry: False
      cluster_verify: "{% if final_result == 'SUCCESSFUL' -%}Y
                       {%- else -%}N
                       {%- endif %}"
      gi_install_status: "{{ final_result }}"
  tags:
  - apex_api

- name: Final Result
  debug:
    var: final_result
  failed_when: final_result == 'FAILED'